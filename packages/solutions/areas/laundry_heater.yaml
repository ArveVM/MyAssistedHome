###############################################################################
#   @author       :   ArveVM
#   @date         :   04.May.2022
#   @solution     :   Laundry, heating solutions
#   @description  :   Solution to make dumb objects seem smart.
#                     Shelly+1pm-puck behind old type thermostat for el-floor heating
#   utility-meters created in PwrCtrl_use.yaml

# First add some customizations:
homeassistant:
  customize:
    package.node_anchors:
      # Add node-anchor for identification of code-location for created sensors
      package_attribute_to_entity: &solution_attribute
        solution_using_this_entity: "Laundry Heater"
      # Add node-anchor(s) for 'input-sensors' to use as variables
      power: &power sensor.laundry_heater_puck_power # sensor for consumption W
      #energy: &energy sensor.laundry_heater_puck_energy # sensor for consumption kwH
      onoff: &onoff switch.laundry_heater_puck # switch OnOff   (shelly+1pm)
      auto: &auto input_boolean.laundry_heater_powerauto # waf/guest-mode,, will run of local thermostat and NO powersaving
      powersave: &powersave input_boolean.laundry_heater_powersave # use for powersave on price ?
      powerhoursave: &powerhoursave input_boolean.laundry_heater_powerhoursave # use to cut consumption for price-level pr hour
      local_temp: &local_temp sensor.laundry_thp_temperature # external temp
      local_thermostat: &local_thermostat binary_sensor.laundry_heater_puck_input # this is input to Shelly from wall-thermostat, ON means local thermostat(floor) want to turn on heating
      gen_thermostat_output: &gen_thermostat_output input_boolean.laundry_heater_thermostat_output # output from generic thermostat,, used in automations to turn switch on/off
      gen_thermostat: &gen_thermostat climate.laundry_heater_thermostat # output from generic thermostat,, used in automations to turn switch on/off
      target: &target input_number.laundry_heater_longterm_target

    # # Add node-anchor as Attribute on used sensors from other integrations/solutions:
    sensor.laundry_heater_puck_power:
      <<: *solution_attribute

sensor:
  - name: Laundry Heater time on
    platform: history_stats
    entity_id: switch.laundry_heater_puck
    state: "on"
    type: time
    start: " {{ now().replace(hour=00, minute=00, second=00) }} " # ArveVM - adjusting cutoff to 10sec before midnight, to ensure fresh start next day (specifically to long term satistics graph,, which was not always updated correctly with cutoff exactly at midnight)
    end: " {{ now() }} "

input_boolean:
  laundry_heater_thermostat_output:
    name: Laundry Heater Thermostat Output
    icon: mdi:radiator
  laundry_heater_powerauto:
    name: Laundry Heater PowerAuto
    icon: mdi:magic-staff
  laundry_heater_powersave:
    name: Laundry Heater PowerSave
    icon: mdi:currency-usd
  laundry_heater_powerboost:
    name: Laundry Heater PowerBoost
    icon: mdi:currency-usd
  laundry_heater_powerhoursave:
    name: Laundry Heater PowerHourSave
    icon: mdi:currency-usd

input_number:
  laundry_heater_longterm_target:
    name: Laundry Heater longterm target
    min: 10
    max: 21.0
    step: 0.5

template:
  - sensor:
      - unique_id: laundry_heater_thermostat_target
        name: Laundry Heater Thermostat target
        unit_of_measurement: Â°C
        device_class: temperature
        state: " {{state_attr('climate.laundry_heater_thermostat', 'temperature') }} "

climate:
  - unique_id: laundry_heater_thermostat
    platform: generic_thermostat
    name: Laundry Heater thermostat
    heater: *gen_thermostat_output
    target_sensor: *local_temp
    initial_hvac_mode: heat
    max_temp: 21
    min_cycle_duration:
      minutes: 5 # AVM; try limit switcing to 5min-periods (avoid on/of on local heatspot)
    cold_tolerance: 0.5
    hot_tolerance: 0.5

automation:
  - id: laundry_heater_control_climate
    alias: _Laundry Heater; Control Climate 2
    description: ""
    use_blueprint:
      path: erlendsellie/priceanalyzer.yaml
      input:
        sensor: sensor.priceanalyzer_main
        number: *target
        climate: *gen_thermostat

  - id: "laundry_heater_auto_off"
    alias: "_Laundry Heater; auto OFF"
    description: "when auto is off; switch shold allways follow local thermostat"
    mode: single
    trigger:
      - id: "auto_off"
        platform: state
        entity_id: *auto
        to: "off"
      - id: "thermostat_change"
        platform: state
        entity_id: *local_thermostat # this is input to Shelly from wall-thermostat, ON means local thermostat(floor) want to turn on heating
    condition:
      - condition: state
        entity_id: *auto
        state: "off"
    action:
      - choose:
          - conditions:
              - condition: state
                entity_id: *local_thermostat #  floor sensor
                state: "on"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: *onoff
        default:
          - service: switch.turn_off
            target:
              entity_id: *onoff

  - id: "laundry_heater_auto_on"
    alias: "_Laundry Heater; auto ON"
    description: "when auto is on; switch shold allways follow generic thermostat and power-save schemes"
    mode: single
    trigger:
      - platform: state
        entity_id: *auto
        to: "on"
      - platform: state
        entity_id: *local_thermostat
      - platform: state
        entity_id: *gen_thermostat_output # this is generic thermostat output
      - platform: state
        entity_id: *powersave
      - platform: state
        entity_id: *powerhoursave

    condition:
      - condition: state
        entity_id: *auto
        state: "on"

    action:
      - choose:
          #all conditions nessesary to turn ON:
          - conditions:
              - condition: state
                entity_id: *auto
                state: "on"
              - condition: state
                entity_id: *local_thermostat #  floor sensor
                state: "on"
              - condition: state
                entity_id: *gen_thermostat_output # gen.th.output
                state: "on"
              - condition: state
                entity_id: *powersave #  not powersaving
                state: "off"
              - condition: state
                entity_id: *powerhoursave #  not powersaving
                state: "off"
            sequence:
              - service: switch.turn_on
                target:
                  entity_id: *onoff

        #else; turn off
        default:
          - service: switch.turn_off
            target:
              entity_id: *onoff
